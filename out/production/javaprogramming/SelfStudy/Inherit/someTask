String:

S1 -- Frequency of Characters
Write a return method that can find the frequency of characters
Ex:  FrequencyOfChars("AAABBCDD") ==> A3B2C1D2

S2 -- Remove Duplicates
Write a return method that can remove the duplicated values from String
Ex:  removeDup("AAABBBCCC")  ==> ABC

S3 -- Find the unique
Write a return  method that can find the unique characters from the String
Ex:  unique("AAABBBCCCDEF")  ==>  "DEF";

S4 -- Reverse
Write a return method that can reverse String
Ex: Reverse("ABCD"); ==> DCBA

S5 -- Sort
sort the characters of a string without using any predefined methods of String class in Java
Ex: Reverse("CBDA"); ==> ABCD

        S5.1 -- Swap Characters in a String
        swap two character in a string without using Array
        Ex: swap position of first 'F' and last 'A'
        Reverse("FCFFFAD"); ==> ACFFFFD

S6 -- Same letters
Write a return method that check if a string is build out of the same letters as another string.
Ex:  same("abc",  "cab"); -> true
same("abc",  "abb"); -> false:

S7 -- sum of digits in a string
Write a method that can return the sum of the digits in a string

S8 -- Sort Letters and Numbers from alphanumeric String
Given alphanumeric String, we need to split the string into substrings of consecutive letters or numbers, sort the individual string and append them back together
Ex: Input:  "DC501GCCCA098911"
OutPut: "CD015ACCCG011899"

S8 -- Password Validation Task
Write a return method that can verify if a password is valid or not.
requirements:
1. Password MUST be at least have 6 characters and should not contain space
2. PassWord should at least contain one upper case letter
3. PassWord should at least contain one lowercase letter
4. Password should at least contain one special characters
5. Password should at least contain a digit
if all requirements above are met, the method returns true, otherwise returns  false


S9 -- SumTheDigits
 * Q1: (Sum the digits in an integer) Write a program that reads an integer
 * between 0 and 1000 and adds all the digits in the integer. For example, if an
 * integer is 932, the sum of all its digits is 14.
 *
 * NOTE: We will need to solve this without using loops.
 *
 * Hint: Use the % operator to extract digits, and use the / operator to remove
 * the extracted digit. For instance, 932 % 10 = 2 and 932 / 10 = 93.
 *
 * Here is a sample run: Enter a number between 0 and 1000: 999 The sum of the
 * digits is 27
 */


s10 -- ComputeChange
/*
 * ComputeChange
 *
 * Enter an amount, for example: 11.56 Your amount 11.56 consists of 11 dollars
 * 2 quarters 0 dimes 1 nickels 1 cent
 */